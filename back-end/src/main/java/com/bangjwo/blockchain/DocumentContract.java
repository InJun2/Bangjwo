package com.bangjwo.blockchain;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import io.reactivex.Flowable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/hyperledger-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.3.
 */
@SuppressWarnings("rawtypes")
public class DocumentContract extends Contract {
	public static final String BINARY = "0x60806040523480156200001157600080fd5b5060405162001b5b38038062001b5b833981810160405281019062000037919062000268565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000a9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000a09062000310565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200011b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001129062000382565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fb51454ce8c7f26becd312a46c4815553887f2ec876a0b8dc813b87f62edf6f8060405160405180910390a35050620003a4565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002308262000203565b9050919050565b620002428162000223565b81146200024e57600080fd5b50565b600081519050620002628162000237565b92915050565b60008060408385031215620002825762000281620001fe565b5b6000620002928582860162000251565b9250506020620002a58582860162000251565b9150509250929050565b600082825260208201905092915050565b7f496e76616c6964206f776e657220616464726573730000000000000000000000600082015250565b6000620002f8601583620002af565b91506200030582620002c0565b602082019050919050565b600060208201905081810360008301526200032b81620002e9565b9050919050565b7f496e76616c69642070726f706f736564206f776e657220616464726573730000600082015250565b60006200036a601e83620002af565b9150620003778262000332565b602082019050919050565b600060208201905081810360008301526200039d816200035b565b9050919050565b6117a780620003b46000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806314d7030314610051578063710bf3221461006d578063774eb0e81461008957806379ba5097146100b9575b600080fd5b61006b60048036038101906100669190610dd9565b6100c3565b005b61008760048036038101906100829190610ebf565b610354565b005b6100a3600480360381019061009e9190610eec565b61062d565b6040516100b09190610fbc565b60405180910390f35b6100c1610822565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610151576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101489061102a565b60405180910390fd5b60006002600087815260200190815260200160002060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf90611096565b60405180910390fd5b6101d284846109f4565b15610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020990611102565b60405180910390fd5b604051806060016040528085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020018367ffffffffffffffff1681526020018267ffffffffffffffff168152506002600087815260200190815260200160002060008201518160000190816102ad919061135d565b5060208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550905050847f312ba4acef62bb1f27e1e1c605e426873e8a577eae0aee9bcb773edf429a559e85858585604051610345949392919061147a565b60405180910390a25050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d99061102a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610451576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044890611506565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d690611572565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461056f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610566906115de565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fb51454ce8c7f26becd312a46c4815553887f2ec876a0b8dc813b87f62edf6f8060405160405180910390a350565b606060006002600085815260200190815260200160002060405180606001604052908160008201805461065f90611180565b80601f016020809104026020016040519081016040528092919081815260200182805461068b90611180565b80156106d85780601f106106ad576101008083540402835291602001916106d8565b820191906000526020600020905b8154815290600101906020018083116106bb57829003601f168201915b505050505081526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016001820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505090506000816020015167ffffffffffffffff1603610798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078f9061164a565b60405180910390fd5b806020015167ffffffffffffffff168367ffffffffffffffff1614806107d55750806040015167ffffffffffffffff168367ffffffffffffffff16145b610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b906116b6565b60405180910390fd5b806000015191505092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990611722565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600081519050602e8103610b23577f510000000000000000000000000000000000000000000000000000000000000082600081518110610a8157610a80611742565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015610b1a57507f6d0000000000000000000000000000000000000000000000000000000000000082600181518110610aeb57610aea611742565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b92505050610cee565b60318110158015610b355750603b8111155b15610ce7577f620000000000000000000000000000000000000000000000000000000000000082600081518110610b6f57610b6e611742565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148015610c0857507f610000000000000000000000000000000000000000000000000000000000000082600181518110610bd957610bd8611742565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610c7357507f660000000000000000000000000000000000000000000000000000000000000082600281518110610c4457610c43611742565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8015610cde57507f790000000000000000000000000000000000000000000000000000000000000082600381518110610caf57610cae611742565b5b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b92505050610cee565b6000925050505b92915050565b600080fd5b600080fd5b6000819050919050565b610d1181610cfe565b8114610d1c57600080fd5b50565b600081359050610d2e81610d08565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610d5957610d58610d34565b5b8235905067ffffffffffffffff811115610d7657610d75610d39565b5b602083019150836001820283011115610d9257610d91610d3e565b5b9250929050565b600067ffffffffffffffff82169050919050565b610db681610d99565b8114610dc157600080fd5b50565b600081359050610dd381610dad565b92915050565b600080600080600060808688031215610df557610df4610cf4565b5b6000610e0388828901610d1f565b955050602086013567ffffffffffffffff811115610e2457610e23610cf9565b5b610e3088828901610d43565b94509450506040610e4388828901610dc4565b9250506060610e5488828901610dc4565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e8c82610e61565b9050919050565b610e9c81610e81565b8114610ea757600080fd5b50565b600081359050610eb981610e93565b92915050565b600060208284031215610ed557610ed4610cf4565b5b6000610ee384828501610eaa565b91505092915050565b60008060408385031215610f0357610f02610cf4565b5b6000610f1185828601610d1f565b9250506020610f2285828601610dc4565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f66578082015181840152602081019050610f4b565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f8e82610f2c565b610f988185610f37565b9350610fa8818560208601610f48565b610fb181610f72565b840191505092915050565b60006020820190508181036000830152610fd68184610f83565b905092915050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000611014600e83610f37565b915061101f82610fde565b602082019050919050565b6000602082019050818103600083015261104381611007565b9050919050565b7f436f6e7472616374204944206578697374730000000000000000000000000000600082015250565b6000611080601283610f37565b915061108b8261104a565b602082019050919050565b600060208201905081810360008301526110af81611073565b9050919050565b7f496e76616c696420495046532043494400000000000000000000000000000000600082015250565b60006110ec601083610f37565b91506110f7826110b6565b602082019050919050565b6000602082019050818103600083015261111b816110df565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061119857607f821691505b6020821081036111ab576111aa611151565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026112137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826111d6565b61121d86836111d6565b95508019841693508086168417925050509392505050565b6000819050919050565b600061125a61125561125084610cfe565b611235565b610cfe565b9050919050565b6000819050919050565b6112748361123f565b61128861128082611261565b8484546111e3565b825550505050565b600090565b61129d611290565b6112a881848461126b565b505050565b5b818110156112cc576112c1600082611295565b6001810190506112ae565b5050565b601f821115611311576112e2816111b1565b6112eb846111c6565b810160208510156112fa578190505b61130e611306856111c6565b8301826112ad565b50505b505050565b600082821c905092915050565b600061133460001984600802611316565b1980831691505092915050565b600061134d8383611323565b9150826002028217905092915050565b61136682610f2c565b67ffffffffffffffff81111561137f5761137e611122565b5b6113898254611180565b6113948282856112d0565b600060209050601f8311600181146113c757600084156113b5578287015190505b6113bf8582611341565b865550611427565b601f1984166113d5866111b1565b60005b828110156113fd578489015182556001820191506020850194506020810190506113d8565b8683101561141a5784890151611416601f891682611323565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b600061144a8385610f37565b935061145783858461142f565b61146083610f72565b840190509392505050565b61147481610d99565b82525050565b6000606082019050818103600083015261149581868861143e565b90506114a4602083018561146b565b6114b1604083018461146b565b95945050505050565b7f4e6577206f776e6572206973207a65726f206164647265737300000000000000600082015250565b60006114f0601983610f37565b91506114fb826114ba565b602082019050919050565b6000602082019050818103600083015261151f816114e3565b9050919050565b7f4e6577206f776e65722069732063757272656e74206f776e6572000000000000600082015250565b600061155c601a83610f37565b915061156782611526565b602082019050919050565b6000602082019050818103600083015261158b8161154f565b9050919050565b7f4e6577206f776e657220697320616c72656164792070726f706f736564000000600082015250565b60006115c8601d83610f37565b91506115d382611592565b602082019050919050565b600060208201905081810360008301526115f7816115bb565b9050919050565b7f436f6e7472616374206e6f7420666f756e640000000000000000000000000000600082015250565b6000611634601283610f37565b915061163f826115fe565b602082019050919050565b6000602082019050818103600083015261166381611627565b9050919050565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b60006116a0600c83610f37565b91506116ab8261166a565b602082019050919050565b600060208201905081810360008301526116cf81611693565b9050919050565b7f4e6f742070726f706f736564206f776e65720000000000000000000000000000600082015250565b600061170c601283610f37565b9150611717826116d6565b602082019050919050565b6000602082019050818103600083015261173b816116ff565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212207f87071b01c53f25c828c235373963d368004fd1ef9b32a00c6a7ace706fa1f364736f6c63430008140033";

	private static String librariesLinkedBinary;

	public static final String FUNC_ACCEPTOWNERSHIP = "acceptOwnership";

	public static final String FUNC_GETCONTRACT = "getContract";

	public static final String FUNC_PROPOSEOWNERSHIP = "proposeOwnership";

	public static final String FUNC_REGISTERCONTRACT = "registerContract";

	public static final Event CONTRACTCREATED_EVENT = new Event("ContractCreated",
		Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
		}, new TypeReference<Utf8String>() {
		}, new TypeReference<Uint64>() {
		}, new TypeReference<Uint64>() {
		}));
	;

	public static final Event OWNERSHIPPROPOSED_EVENT = new Event("OwnershipProposed",
		Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
		}, new TypeReference<Address>(true) {
		}));
	;

	public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
		Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {
		}, new TypeReference<Address>(true) {
		}));
	;

	@Deprecated
	protected DocumentContract(String contractAddress, Web3j web3j, Credentials credentials,
		BigInteger gasPrice, BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	protected DocumentContract(String contractAddress, Web3j web3j, Credentials credentials,
		ContractGasProvider contractGasProvider) {
		super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
	}

	@Deprecated
	protected DocumentContract(String contractAddress, Web3j web3j,
		TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
		super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
	}

	protected DocumentContract(String contractAddress, Web3j web3j,
		TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
		super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
	}

	public static List<ContractCreatedEventResponse> getContractCreatedEvents(
		TransactionReceipt transactionReceipt) {
		List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CONTRACTCREATED_EVENT,
			transactionReceipt);
		ArrayList<ContractCreatedEventResponse> responses = new ArrayList<ContractCreatedEventResponse>(
			valueList.size());
		for (Contract.EventValuesWithLog eventValues : valueList) {
			ContractCreatedEventResponse typedResponse = new ContractCreatedEventResponse();
			typedResponse.log = eventValues.getLog();
			typedResponse.contractId = (BigInteger)eventValues.getIndexedValues().get(0).getValue();
			typedResponse.ipfsHash = (String)eventValues.getNonIndexedValues().get(0).getValue();
			typedResponse.landlord = (BigInteger)eventValues.getNonIndexedValues().get(1).getValue();
			typedResponse.tenant = (BigInteger)eventValues.getNonIndexedValues().get(2).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public static ContractCreatedEventResponse getContractCreatedEventFromLog(Log log) {
		Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CONTRACTCREATED_EVENT, log);
		ContractCreatedEventResponse typedResponse = new ContractCreatedEventResponse();
		typedResponse.log = log;
		typedResponse.contractId = (BigInteger)eventValues.getIndexedValues().get(0).getValue();
		typedResponse.ipfsHash = (String)eventValues.getNonIndexedValues().get(0).getValue();
		typedResponse.landlord = (BigInteger)eventValues.getNonIndexedValues().get(1).getValue();
		typedResponse.tenant = (BigInteger)eventValues.getNonIndexedValues().get(2).getValue();
		return typedResponse;
	}

	public Flowable<ContractCreatedEventResponse> contractCreatedEventFlowable(EthFilter filter) {
		return web3j.ethLogFlowable(filter).map(log -> getContractCreatedEventFromLog(log));
	}

	public Flowable<ContractCreatedEventResponse> contractCreatedEventFlowable(
		DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(CONTRACTCREATED_EVENT));
		return contractCreatedEventFlowable(filter);
	}

	public static List<OwnershipProposedEventResponse> getOwnershipProposedEvents(
		TransactionReceipt transactionReceipt) {
		List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPPROPOSED_EVENT,
			transactionReceipt);
		ArrayList<OwnershipProposedEventResponse> responses = new ArrayList<OwnershipProposedEventResponse>(
			valueList.size());
		for (Contract.EventValuesWithLog eventValues : valueList) {
			OwnershipProposedEventResponse typedResponse = new OwnershipProposedEventResponse();
			typedResponse.log = eventValues.getLog();
			typedResponse.currentOwner = (String)eventValues.getIndexedValues().get(0).getValue();
			typedResponse.newOwner = (String)eventValues.getIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public static OwnershipProposedEventResponse getOwnershipProposedEventFromLog(Log log) {
		Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPPROPOSED_EVENT, log);
		OwnershipProposedEventResponse typedResponse = new OwnershipProposedEventResponse();
		typedResponse.log = log;
		typedResponse.currentOwner = (String)eventValues.getIndexedValues().get(0).getValue();
		typedResponse.newOwner = (String)eventValues.getIndexedValues().get(1).getValue();
		return typedResponse;
	}

	public Flowable<OwnershipProposedEventResponse> ownershipProposedEventFlowable(
		EthFilter filter) {
		return web3j.ethLogFlowable(filter).map(log -> getOwnershipProposedEventFromLog(log));
	}

	public Flowable<OwnershipProposedEventResponse> ownershipProposedEventFlowable(
		DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(OWNERSHIPPROPOSED_EVENT));
		return ownershipProposedEventFlowable(filter);
	}

	public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
		TransactionReceipt transactionReceipt) {
		List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT,
			transactionReceipt);
		ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(
			valueList.size());
		for (Contract.EventValuesWithLog eventValues : valueList) {
			OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
			typedResponse.log = eventValues.getLog();
			typedResponse.previousOwner = (String)eventValues.getIndexedValues().get(0).getValue();
			typedResponse.newOwner = (String)eventValues.getIndexedValues().get(1).getValue();
			responses.add(typedResponse);
		}
		return responses;
	}

	public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
		Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
		OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
		typedResponse.log = log;
		typedResponse.previousOwner = (String)eventValues.getIndexedValues().get(0).getValue();
		typedResponse.newOwner = (String)eventValues.getIndexedValues().get(1).getValue();
		return typedResponse;
	}

	public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
		EthFilter filter) {
		return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
	}

	public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
		DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
		EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
		filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
		return ownershipTransferredEventFlowable(filter);
	}

	public RemoteFunctionCall<TransactionReceipt> acceptOwnership() {
		final Function function = new Function(
			FUNC_ACCEPTOWNERSHIP,
			Arrays.<Type>asList(),
			Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<String> getContract(BigInteger _contractId, BigInteger _requesterId) {
		final Function function = new Function(FUNC_GETCONTRACT,
			Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_contractId),
				new org.web3j.abi.datatypes.generated.Uint64(_requesterId)),
			Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {
			}));
		return executeRemoteCallSingleValueReturn(function, String.class);
	}

	public RemoteFunctionCall<TransactionReceipt> proposeOwnership(String _newOwner) {
		final Function function = new Function(
			FUNC_PROPOSEOWNERSHIP,
			Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newOwner)),
			Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	public RemoteFunctionCall<TransactionReceipt> registerContract(BigInteger _id, String _ipfsHash,
		BigInteger _landlord, BigInteger _tenant) {
		final Function function = new Function(
			FUNC_REGISTERCONTRACT,
			Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_id),
				new org.web3j.abi.datatypes.Utf8String(_ipfsHash),
				new org.web3j.abi.datatypes.generated.Uint64(_landlord),
				new org.web3j.abi.datatypes.generated.Uint64(_tenant)),
			Collections.<TypeReference<?>>emptyList());
		return executeRemoteCallTransaction(function);
	}

	@Deprecated
	public static DocumentContract load(String contractAddress, Web3j web3j,
		Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
		return new DocumentContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
	}

	@Deprecated
	public static DocumentContract load(String contractAddress, Web3j web3j,
		TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
		return new DocumentContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
	}

	public static DocumentContract load(String contractAddress, Web3j web3j,
		Credentials credentials, ContractGasProvider contractGasProvider) {
		return new DocumentContract(contractAddress, web3j, credentials, contractGasProvider);
	}

	public static DocumentContract load(String contractAddress, Web3j web3j,
		TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
		return new DocumentContract(contractAddress, web3j, transactionManager, contractGasProvider);
	}

	public static RemoteCall<DocumentContract> deploy(Web3j web3j, Credentials credentials,
		ContractGasProvider contractGasProvider, String _owner, String _proposedOwner) {
		String encodedConstructor = FunctionEncoder.encodeConstructor(
			Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner),
				new org.web3j.abi.datatypes.Address(160, _proposedOwner)));
		return deployRemoteCall(DocumentContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(),
			encodedConstructor);
	}

	public static RemoteCall<DocumentContract> deploy(Web3j web3j,
		TransactionManager transactionManager, ContractGasProvider contractGasProvider,
		String _owner, String _proposedOwner) {
		String encodedConstructor = FunctionEncoder.encodeConstructor(
			Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner),
				new org.web3j.abi.datatypes.Address(160, _proposedOwner)));
		return deployRemoteCall(DocumentContract.class, web3j, transactionManager, contractGasProvider,
			getDeploymentBinary(), encodedConstructor);
	}

	@Deprecated
	public static RemoteCall<DocumentContract> deploy(Web3j web3j, Credentials credentials,
		BigInteger gasPrice, BigInteger gasLimit, String _owner, String _proposedOwner) {
		String encodedConstructor = FunctionEncoder.encodeConstructor(
			Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner),
				new org.web3j.abi.datatypes.Address(160, _proposedOwner)));
		return deployRemoteCall(DocumentContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(),
			encodedConstructor);
	}

	@Deprecated
	public static RemoteCall<DocumentContract> deploy(Web3j web3j,
		TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit,
		String _owner, String _proposedOwner) {
		String encodedConstructor = FunctionEncoder.encodeConstructor(
			Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _owner),
				new org.web3j.abi.datatypes.Address(160, _proposedOwner)));
		return deployRemoteCall(DocumentContract.class, web3j, transactionManager, gasPrice, gasLimit,
			getDeploymentBinary(), encodedConstructor);
	}

	public static void linkLibraries(List<Contract.LinkReference> references) {
		librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
	}

	private static String getDeploymentBinary() {
		if (librariesLinkedBinary != null) {
			return librariesLinkedBinary;
		} else {
			return BINARY;
		}
	}

	public static class ContractCreatedEventResponse extends BaseEventResponse {
		public BigInteger contractId;

		public String ipfsHash;

		public BigInteger landlord;

		public BigInteger tenant;
	}

	public static class OwnershipProposedEventResponse extends BaseEventResponse {
		public String currentOwner;

		public String newOwner;
	}

	public static class OwnershipTransferredEventResponse extends BaseEventResponse {
		public String previousOwner;

		public String newOwner;
	}
}
